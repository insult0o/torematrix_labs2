[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "torematrix-labs"
version = "3.0.0"
description = "Next-generation document processing platform with zero-hallucination AI integration"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "Proprietary"}
authors = [
    {name = "TORE Matrix Labs Team", email = "team@torematrixlabs.com"},
]
keywords = ["document processing", "AI", "PDF", "unstructured data", "enterprise"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "PyQt6>=6.6.0",
    "PyQt6-Qt6>=6.6.0", 
    "PyQt6-sip>=13.6.0",
    "PyMuPDF>=1.23.0",
    "unstructured[all-docs]>=0.10.0",
    "pdfplumber>=0.9.0",
    "pdfminer.six>=20221105",
    "PyPDF2>=3.0.0",
    "pillow>=10.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "aiofiles>=23.0.0",
    "httpx>=0.25.0",
    "rich>=13.0.0",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    "orjson>=3.9.0",
    "structlog>=23.0.0",
    "watchdog>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-qt>=4.2.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

postgres = [
    "psycopg[binary]>=3.1.0",
    "asyncpg>=0.28.0",
]

mongodb = [
    "pymongo>=4.5.0",
    "motor>=3.3.0",
]

cloud = [
    "boto3>=1.28.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0",
]

[project.scripts]
torematrix = "torematrix.cli:main"
torematrix-gui = "torematrix.ui.app:main"

[project.urls]
Homepage = "https://github.com/insult0o/torematrix_labs2"
Documentation = "https://torematrix-labs.readthedocs.io"
Repository = "https://github.com/insult0o/torematrix_labs2.git"
Issues = "https://github.com/insult0o/torematrix_labs2/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
torematrix = [
    "assets/**/*",
    "config/default_settings.yaml",
    "ui/themes/*.qss",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=torematrix",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src/torematrix"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]