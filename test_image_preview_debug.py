#!/usr/bin/env python3
"""
Debug the image preview functionality step by step.
"""

import sys
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

def test_manual_validation_load():
    """Test manual validation widget loading."""
    print("üß™ Testing Manual Validation Widget Load")
    print("=" * 50)
    
    try:
        from tore_matrix_labs.config.settings import Settings
        from tore_matrix_labs.ui.components.manual_validation_widget import ManualValidationWidget
        from tore_matrix_labs.models.document_models import Document, DocumentMetadata
        from datetime import datetime
        
        # Create a settings object
        settings = Settings()
        print("‚úÖ Settings created")
        
        # Can't create widget without QApplication, but check method signatures
        expected_methods = [
            'load_document',
            '_show_preview_image',
            '_on_area_preview_update',
            '_extract_and_display_area_image'
        ]
        
        for method in expected_methods:
            if hasattr(ManualValidationWidget, method):
                print(f"‚úÖ Method {method}: Available")
            else:
                print(f"‚ùå Method {method}: Missing")
                return False
        
        # Check load_document signature to see if it accepts file_path
        import inspect
        sig = inspect.signature(ManualValidationWidget.load_document)
        params = list(sig.parameters.keys())
        
        if 'file_path' in params:
            print("‚úÖ load_document accepts file_path parameter")
        else:
            print("‚ùå load_document missing file_path parameter")
            return False
        
        print("‚úÖ Manual validation widget structure correct")
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_classification_dialog_no_naming():
    """Test that classification dialog doesn't allow user naming."""
    print("\nüß™ Testing Classification Dialog (No User Naming)")
    print("=" * 50)
    
    try:
        # Check classification dialog source
        dialog_file = Path(__file__).parent / "tore_matrix_labs" / "ui" / "components" / "manual_validation_widget.py"
        content = dialog_file.read_text()
        
        # Check that name input fields are removed
        if 'QLineEdit' in content and 'name_input' in content:
            print("‚ùå User naming input still exists")
            return False
        
        if 'automatically generated by the system' in content:
            print("‚úÖ System naming message present")
        else:
            print("‚ùå System naming message missing")
            return False
        
        if 'user_name' not in content or content.count('user_name') <= 1:  # Only in old comments
            print("‚úÖ user_name references removed")
        else:
            print("‚ùå user_name references still exist")
            return False
        
        print("‚úÖ Classification dialog has no user naming options")
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_preview_image_logic():
    """Test the preview image display logic."""
    print("\nüß™ Testing Preview Image Logic")
    print("=" * 50)
    
    try:
        # Check that _show_preview_image method has proper error handling
        widget_file = Path(__file__).parent / "tore_matrix_labs" / "ui" / "components" / "manual_validation_widget.py"
        content = widget_file.read_text()
        
        # Check for proper logging and error handling
        if 'logger.error' in content and 'Cannot show preview' in content:
            print("‚úÖ Error logging implemented")
        else:
            print("‚ùå Error logging missing")
            return False
        
        # Check for file path validation
        if 'current_document' in content and 'current_file_path' in content:
            print("‚úÖ File path validation present")
        else:
            print("‚ùå File path validation missing")
            return False
        
        # Check for PyMuPDF usage
        if 'fitz.open' in content and 'get_pixmap' in content:
            print("‚úÖ PyMuPDF image extraction implemented")
        else:
            print("‚ùå PyMuPDF image extraction missing")
            return False
        
        # Check for QPixmap conversion
        if 'QPixmap' in content and 'loadFromData' in content:
            print("‚úÖ QPixmap conversion implemented")
        else:
            print("‚ùå QPixmap conversion missing")
            return False
        
        print("‚úÖ Preview image logic properly implemented")
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_signal_connections():
    """Test that all signals are properly connected."""
    print("\nüß™ Testing Signal Connections")
    print("=" * 50)
    
    try:
        # Check main window connections
        main_window_file = Path(__file__).parent / "tore_matrix_labs" / "ui" / "main_window.py"
        content = main_window_file.read_text()
        
        # Check for area preview update connection
        if 'area_preview_update.connect' in content:
            print("‚úÖ area_preview_update signal connected")
        else:
            print("‚ùå area_preview_update signal not connected")
            return False
        
        # Check for manual validation method connection
        if '_on_area_preview_update' in content:
            print("‚úÖ Manual validation preview handler connected")
        else:
            print("‚ùå Manual validation preview handler not connected")
            return False
        
        # Check PDF viewer file for signal implementation
        pdf_viewer_file = Path(__file__).parent / "tore_matrix_labs" / "ui" / "components" / "pdf_viewer.py"
        pdf_content = pdf_viewer_file.read_text()
        
        if 'area_preview_update = pyqtSignal' in pdf_content:
            print("‚úÖ PDF viewer has area_preview_update signal")
        else:
            print("‚ùå PDF viewer missing area_preview_update signal")
            return False
        
        print("‚úÖ All signals properly connected")
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def debug_potential_issues():
    """Debug potential issues with image preview."""
    print("\nüîç Debugging Potential Issues")
    print("=" * 50)
    
    issues_to_check = [
        ("File path not properly passed to manual validation", "load_document.*file_path"),
        ("Preview method not being called", "_show_preview_image"),
        ("Error in coordinate conversion", "_convert_to_pdf_coordinates"), 
        ("PyMuPDF extraction failing", "fitz.open.*clip"),
        ("QPixmap conversion failing", "pixmap.loadFromData"),
        ("Preview label not updating", "area_preview_label.setPixmap")
    ]
    
    try:
        widget_file = Path(__file__).parent / "tore_matrix_labs" / "ui" / "components" / "manual_validation_widget.py"
        content = widget_file.read_text()
        
        for issue, pattern in issues_to_check:
            import re
            if re.search(pattern, content):
                print(f"‚úÖ {issue}: Code present")
            else:
                print(f"‚ö†Ô∏è  {issue}: Code missing/different")
        
        print("\nüí° Debugging Tips:")
        print("   1. Check console logs for 'Loading document:' messages")
        print("   2. Check for 'Cannot show preview:' error messages")
        print("   3. Verify PDF file path is correct")
        print("   4. Test with a simple PDF file first")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Run image preview debugging tests."""
    print("üöÄ TORE Matrix Labs - Image Preview Debug")
    print("=" * 80)
    
    tests = [
        test_manual_validation_load,
        test_classification_dialog_no_naming,
        test_preview_image_logic,
        test_signal_connections,
        debug_potential_issues
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"üí• Test error: {e}")
            failed += 1
    
    print("\n" + "=" * 80)
    print(f"üìä Test Results: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("üéâ All image preview components are properly implemented!")
        
        print("\n‚úÖ VERIFIED:")
        print("   üîß Manual validation load method accepts file_path")
        print("   üö´ User naming completely removed (system control only)")
        print("   üñºÔ∏è  Image preview logic properly implemented")
        print("   üì° All signals connected correctly")
        
        print("\nüîç DEBUGGING NEXT STEPS:")
        print("   1. Run the application")
        print("   2. Check console for 'Loading document:' messages") 
        print("   3. Try dragging on PDF - look for 'Received preview update:' logs")
        print("   4. Check for any 'Cannot show preview:' errors")
        print("   5. Verify the PDF file is being loaded correctly")
        
        print("\nüìã IF STILL NOT WORKING:")
        print("   ‚Ä¢ Check that PDF document loads in right panel")
        print("   ‚Ä¢ Verify manual validation tab is active")
        print("   ‚Ä¢ Try with a simple, small PDF file")
        print("   ‚Ä¢ Check console logs for specific error messages")
        
    else:
        print("‚ö†Ô∏è  Some image preview components need fixes.")
    
    return failed == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)