{
  "session_info": {
    "session_id": "validation_20250710_195936",
    "started_at": "2025-07-10T19:59:36.215255",
    "completed_at": "2025-07-10T19:59:36.279549",
    "duration_seconds": 0.064294
  },
  "test_summary": {
    "total_tests": 23,
    "passed_tests": 20,
    "failed_tests": 0,
    "error_tests": 3,
    "skipped_tests": 0,
    "pass_rate": 86.95652173913044
  },
  "coverage_report": {
    "modules_analyzed": 21,
    "total_functions": 13,
    "total_classes": 85,
    "tested_functions": 0,
    "module_details": [
      {
        "module": "core.storage.repository_base",
        "functions": [],
        "classes": [
          {
            "name": "RepositoryBase",
            "doc": "Abstract base class for repositories.\n\nProvides common repository functionality with support for different\nstorage backends and transaction management.",
            "methods": [
              {
                "name": "__del__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, config: core.storage.repository_base.StorageConfig, entity_type: Type[~T])",
                "is_public": false
              },
              {
                "name": "_begin_transaction",
                "signature": "(self, transaction: core.storage.repository_base.StorageTransaction)",
                "is_public": false
              },
              {
                "name": "_cache_get",
                "signature": "(self, entity_id: str) -> Optional[~T]",
                "is_public": false
              },
              {
                "name": "_cache_put",
                "signature": "(self, entity_id: str, entity: ~T)",
                "is_public": false
              },
              {
                "name": "_cache_remove",
                "signature": "(self, entity_id: str)",
                "is_public": false
              },
              {
                "name": "_close_connection",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_commit_transaction",
                "signature": "(self, transaction: core.storage.repository_base.StorageTransaction)",
                "is_public": false
              },
              {
                "name": "_create_tables",
                "signature": "(self, connection)",
                "is_public": false
              },
              {
                "name": "_get_connection",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_json_storage",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_sqlite_storage",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_storage",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_matches_criteria",
                "signature": "(self, entity: ~T, criteria: Dict[str, Any]) -> bool",
                "is_public": false
              },
              {
                "name": "_rollback_transaction",
                "signature": "(self, transaction: core.storage.repository_base.StorageTransaction)",
                "is_public": false
              },
              {
                "name": "_update_stats",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "clear_cache",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "count",
                "signature": "(self) -> int",
                "is_public": true
              },
              {
                "name": "create",
                "signature": "(self, entity: ~T, transaction: Optional[core.storage.repository_base.StorageTransaction] = None) -> str",
                "is_public": true
              },
              {
                "name": "delete",
                "signature": "(self, entity_id: str, transaction: Optional[core.storage.repository_base.StorageTransaction] = None) -> bool",
                "is_public": true
              },
              {
                "name": "exists",
                "signature": "(self, entity_id: str) -> bool",
                "is_public": true
              },
              {
                "name": "find_by_criteria",
                "signature": "(self, criteria: Dict[str, Any]) -> List[~T]",
                "is_public": true
              },
              {
                "name": "get_by_id",
                "signature": "(self, entity_id: str) -> Optional[~T]",
                "is_public": true
              },
              {
                "name": "get_statistics",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "list_all",
                "signature": "(self, limit: Optional[int] = None, offset: int = 0) -> List[~T]",
                "is_public": true
              },
              {
                "name": "transaction",
                "signature": "(self) -> core.storage.repository_base.StorageTransaction",
                "is_public": true
              },
              {
                "name": "update",
                "signature": "(self, entity: ~T, transaction: Optional[core.storage.repository_base.StorageTransaction] = None) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "StorageBackend",
            "doc": "Supported storage backends.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "StorageConfig",
            "doc": "Configuration for storage backend.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, backend: core.storage.repository_base.StorageBackend = <StorageBackend.JSON_FILE: 'json_file'>, connection_string: str = '', database_path: Optional[pathlib.Path] = None, enable_caching: bool = True, cache_size: int = 1000, connection_timeout: int = 30, auto_commit: bool = True, isolation_level: str = 'READ_COMMITTED', backup_enabled: bool = True, backup_count: int = 5) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "StorageError",
            "doc": "Base exception for storage operations.",
            "methods": [],
            "is_public": true
          },
          {
            "name": "StorageTransaction",
            "doc": "Storage transaction for atomic operations.\n\nProvides ACID properties for storage operations across different backends.",
            "methods": [
              {
                "name": "__enter__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__exit__",
                "signature": "(self, exc_type, exc_val, exc_tb)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, repository: 'RepositoryBase')",
                "is_public": false
              },
              {
                "name": "add_operation",
                "signature": "(self, operation_type: str, data: Dict[str, Any])",
                "is_public": true
              },
              {
                "name": "begin",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "commit",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "rollback",
                "signature": "(self)",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "TransactionError",
            "doc": "Exception for transaction operations.",
            "methods": [],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 6,
        "public_functions": 0,
        "public_classes": 6
      },
      {
        "module": "core.storage.document_repository",
        "functions": [],
        "classes": [
          {
            "name": "DocumentRepository",
            "doc": "Repository for document data storage and retrieval.",
            "methods": [
              {
                "name": "__del__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, storage_config: Optional[Dict[str, Any]] = None)",
                "is_public": false
              },
              {
                "name": "_begin_transaction",
                "signature": "(self, transaction: core.storage.repository_base.StorageTransaction)",
                "is_public": false
              },
              {
                "name": "_cache_get",
                "signature": "(self, entity_id: str) -> Optional[~T]",
                "is_public": false
              },
              {
                "name": "_cache_put",
                "signature": "(self, entity_id: str, entity: ~T)",
                "is_public": false
              },
              {
                "name": "_cache_remove",
                "signature": "(self, entity_id: str)",
                "is_public": false
              },
              {
                "name": "_close_connection",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_commit_transaction",
                "signature": "(self, transaction: core.storage.repository_base.StorageTransaction)",
                "is_public": false
              },
              {
                "name": "_create_tables",
                "signature": "(self, connection)",
                "is_public": false
              },
              {
                "name": "_get_connection",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_json_storage",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_sqlite_storage",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_storage",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_matches_criteria",
                "signature": "(self, entity: ~T, criteria: Dict[str, Any]) -> bool",
                "is_public": false
              },
              {
                "name": "_rollback_transaction",
                "signature": "(self, transaction: core.storage.repository_base.StorageTransaction)",
                "is_public": false
              },
              {
                "name": "_update_stats",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "backup_documents",
                "signature": "(self, backup_path: pathlib.Path) -> bool",
                "is_public": true
              },
              {
                "name": "clear_cache",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "count",
                "signature": "(self) -> int",
                "is_public": true
              },
              {
                "name": "create",
                "signature": "(self, entity: ~T, transaction: Optional[core.storage.repository_base.StorageTransaction] = None) -> str",
                "is_public": true
              },
              {
                "name": "delete",
                "signature": "(self, entity_id: str, transaction: Optional[core.storage.repository_base.StorageTransaction] = None) -> bool",
                "is_public": true
              },
              {
                "name": "delete_document",
                "signature": "(self, document_id: str) -> bool",
                "is_public": true
              },
              {
                "name": "exists",
                "signature": "(self, entity_id: str) -> bool",
                "is_public": true
              },
              {
                "name": "find_by_criteria",
                "signature": "(self, criteria: Dict[str, Any]) -> List[~T]",
                "is_public": true
              },
              {
                "name": "find_documents_by_name",
                "signature": "(self, name_pattern: str) -> List[core.models.unified_document_model.UnifiedDocument]",
                "is_public": true
              },
              {
                "name": "get_by_id",
                "signature": "(self, entity_id: str) -> Optional[~T]",
                "is_public": true
              },
              {
                "name": "get_document_statistics",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_statistics",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "list_all",
                "signature": "(self, limit: Optional[int] = None, offset: int = 0) -> List[~T]",
                "is_public": true
              },
              {
                "name": "list_documents",
                "signature": "(self, status: Optional[core.models.unified_document_model.DocumentStatus] = None) -> List[core.models.unified_document_model.UnifiedDocument]",
                "is_public": true
              },
              {
                "name": "load_document",
                "signature": "(self, document_id: str) -> Optional[core.models.unified_document_model.UnifiedDocument]",
                "is_public": true
              },
              {
                "name": "restore_from_backup",
                "signature": "(self, backup_path: pathlib.Path) -> bool",
                "is_public": true
              },
              {
                "name": "save_document",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument) -> bool",
                "is_public": true
              },
              {
                "name": "transaction",
                "signature": "(self) -> core.storage.repository_base.StorageTransaction",
                "is_public": true
              },
              {
                "name": "update",
                "signature": "(self, entity: ~T, transaction: Optional[core.storage.repository_base.StorageTransaction] = None) -> bool",
                "is_public": true
              },
              {
                "name": "update_document_status",
                "signature": "(self, document_id: str, status: core.models.unified_document_model.DocumentStatus) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 1,
        "public_functions": 0,
        "public_classes": 1
      },
      {
        "module": "core.storage.area_repository",
        "functions": [],
        "classes": [
          {
            "name": "AreaRepository",
            "doc": "Repository for area data storage and retrieval.",
            "methods": [
              {
                "name": "__del__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, storage_config: Optional[Dict[str, Any]] = None)",
                "is_public": false
              },
              {
                "name": "_begin_transaction",
                "signature": "(self, transaction: core.storage.repository_base.StorageTransaction)",
                "is_public": false
              },
              {
                "name": "_cache_get",
                "signature": "(self, entity_id: str) -> Optional[~T]",
                "is_public": false
              },
              {
                "name": "_cache_put",
                "signature": "(self, entity_id: str, entity: ~T)",
                "is_public": false
              },
              {
                "name": "_cache_remove",
                "signature": "(self, entity_id: str)",
                "is_public": false
              },
              {
                "name": "_close_connection",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_commit_transaction",
                "signature": "(self, transaction: core.storage.repository_base.StorageTransaction)",
                "is_public": false
              },
              {
                "name": "_create_tables",
                "signature": "(self, connection)",
                "is_public": false
              },
              {
                "name": "_get_connection",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_json_storage",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_sqlite_storage",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_storage",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_matches_criteria",
                "signature": "(self, entity: ~T, criteria: Dict[str, Any]) -> bool",
                "is_public": false
              },
              {
                "name": "_rollback_transaction",
                "signature": "(self, transaction: core.storage.repository_base.StorageTransaction)",
                "is_public": false
              },
              {
                "name": "_update_stats",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "clear_cache",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "count",
                "signature": "(self) -> int",
                "is_public": true
              },
              {
                "name": "create",
                "signature": "(self, entity: ~T, transaction: Optional[core.storage.repository_base.StorageTransaction] = None) -> str",
                "is_public": true
              },
              {
                "name": "delete",
                "signature": "(self, entity_id: str, transaction: Optional[core.storage.repository_base.StorageTransaction] = None) -> bool",
                "is_public": true
              },
              {
                "name": "delete_area",
                "signature": "(self, area_id: str) -> bool",
                "is_public": true
              },
              {
                "name": "exists",
                "signature": "(self, entity_id: str) -> bool",
                "is_public": true
              },
              {
                "name": "find_by_criteria",
                "signature": "(self, criteria: Dict[str, Any]) -> List[~T]",
                "is_public": true
              },
              {
                "name": "get_by_id",
                "signature": "(self, entity_id: str) -> Optional[~T]",
                "is_public": true
              },
              {
                "name": "get_statistics",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "list_all",
                "signature": "(self, limit: Optional[int] = None, offset: int = 0) -> List[~T]",
                "is_public": true
              },
              {
                "name": "list_areas_by_document",
                "signature": "(self, document_id: str) -> List[core.models.unified_area_model.UnifiedArea]",
                "is_public": true
              },
              {
                "name": "list_areas_by_type",
                "signature": "(self, area_type: core.models.unified_area_model.AreaType) -> List[core.models.unified_area_model.UnifiedArea]",
                "is_public": true
              },
              {
                "name": "load_area",
                "signature": "(self, area_id: str) -> Optional[core.models.unified_area_model.UnifiedArea]",
                "is_public": true
              },
              {
                "name": "save_area",
                "signature": "(self, area: core.models.unified_area_model.UnifiedArea) -> bool",
                "is_public": true
              },
              {
                "name": "transaction",
                "signature": "(self) -> core.storage.repository_base.StorageTransaction",
                "is_public": true
              },
              {
                "name": "update",
                "signature": "(self, entity: ~T, transaction: Optional[core.storage.repository_base.StorageTransaction] = None) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 1,
        "public_functions": 0,
        "public_classes": 1
      },
      {
        "module": "core.storage.migration_manager",
        "functions": [],
        "classes": [
          {
            "name": "MigrationConfig",
            "doc": "Configuration for migration operations.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, create_backup: bool = True, backup_suffix: str = '.backup', validate_data: bool = True, strict_validation: bool = False, batch_size: int = 100, progress_callback: Optional[<built-in function callable>] = None, continue_on_error: bool = False, max_errors: int = 10) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "MigrationManager",
            "doc": "Manager for migrating .tore files between versions.\n\nHandles backward compatibility and ensures all existing projects\nwork seamlessly with the new V2 architecture.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, config: Optional[core.storage.migration_manager.MigrationConfig] = None)",
                "is_public": false
              },
              {
                "name": "_generate_id",
                "signature": "(self) -> str",
                "is_public": false
              },
              {
                "name": "_get_v2_schema",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_migrate_area_status",
                "signature": "(self, old_status: str) -> str",
                "is_public": false
              },
              {
                "name": "_migrate_area_type",
                "signature": "(self, old_type: str) -> str",
                "is_public": false
              },
              {
                "name": "_migrate_area_v1_1_to_v2",
                "signature": "(self, area_data: Dict[str, Any]) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_migrate_area_v1_to_v2",
                "signature": "(self, area_data: Dict[str, Any]) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_migrate_document_v1_1_to_v2",
                "signature": "(self, doc_data: Dict[str, Any]) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_migrate_document_v1_to_v2",
                "signature": "(self, doc_data: Dict[str, Any]) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_migrate_from_v1_0",
                "signature": "(self, data: Dict[str, Any], result: core.storage.migration_manager.MigrationResult) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_migrate_from_v1_1",
                "signature": "(self, data: Dict[str, Any], result: core.storage.migration_manager.MigrationResult) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_migrate_status",
                "signature": "(self, old_status: str) -> str",
                "is_public": false
              },
              {
                "name": "_validate_document",
                "signature": "(self, doc: Dict[str, Any], result: core.storage.migration_manager.MigrationResult, context: str)",
                "is_public": false
              },
              {
                "name": "_validate_v2_data",
                "signature": "(self, data: Dict[str, Any], result: core.storage.migration_manager.MigrationResult)",
                "is_public": false
              },
              {
                "name": "detect_version",
                "signature": "(self, tore_file: pathlib.Path) -> Optional[core.storage.migration_manager.ToreVersion]",
                "is_public": true
              },
              {
                "name": "get_migration_history",
                "signature": "(self) -> List[core.storage.migration_manager.MigrationResult]",
                "is_public": true
              },
              {
                "name": "get_migration_statistics",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "migrate_batch",
                "signature": "(self, tore_files: List[pathlib.Path], target_directory: Optional[pathlib.Path] = None) -> List[core.storage.migration_manager.MigrationResult]",
                "is_public": true
              },
              {
                "name": "migrate_file",
                "signature": "(self, source_file: pathlib.Path, target_file: Optional[pathlib.Path] = None, target_version: core.storage.migration_manager.ToreVersion = <ToreVersion.V2_0: '2.0'>) -> core.storage.migration_manager.MigrationResult",
                "is_public": true
              },
              {
                "name": "rollback_migration",
                "signature": "(self, migration_result: core.storage.migration_manager.MigrationResult) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "MigrationResult",
            "doc": "Result of a migration operation.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, migration_id: str, source_file: str, target_file: str, status: core.storage.migration_manager.MigrationStatus = <MigrationStatus.NOT_STARTED: 'not_started'>, source_version: str = '', target_version: str = '2.0', documents_migrated: int = 0, areas_migrated: int = 0, issues_found: int = 0, started_at: Optional[datetime.datetime] = None, completed_at: Optional[datetime.datetime] = None, errors: List[str] = <factory>, warnings: List[str] = <factory>, backup_path: Optional[str] = None) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "MigrationStatus",
            "doc": "Status of migration operations.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ToreVersion",
            "doc": "Supported .tore file versions.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 5,
        "public_functions": 0,
        "public_classes": 5
      },
      {
        "module": "core.services.highlighting_service",
        "functions": [],
        "classes": [
          {
            "name": "Highlight",
            "doc": "A visual highlight.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, coordinates: List[float], highlight_type: core.services.highlighting_service.HighlightType, text: str = '', description: str = '') -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "HighlightType",
            "doc": "Types of highlighting.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "HighlightingService",
            "doc": "Service for managing visual highlights.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "add_highlight",
                "signature": "(self, coordinates: List[float], highlight_type: core.services.highlighting_service.HighlightType, text: str = '', description: str = '') -> str",
                "is_public": true
              },
              {
                "name": "clear_highlights",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "get_highlights",
                "signature": "(self) -> List[core.services.highlighting_service.Highlight]",
                "is_public": true
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 3,
        "public_functions": 0,
        "public_classes": 3
      },
      {
        "module": "core.services.area_classification_service",
        "functions": [],
        "classes": [
          {
            "name": "AreaClassificationService",
            "doc": "Service for classifying document areas automatically.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_analyze_area_characteristics",
                "signature": "(self, coordinates: core.models.unified_area_model.AreaCoordinates, content_text: str, metadata: Dict[str, Any]) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_analyze_text_patterns",
                "signature": "(self, text: str) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_determine_confidence",
                "signature": "(self, best_score: float, all_scores: Dict[core.models.unified_area_model.AreaType, float]) -> core.services.area_classification_service.ClassificationConfidence",
                "is_public": false
              },
              {
                "name": "_generate_reasoning",
                "signature": "(self, area_type: core.models.unified_area_model.AreaType, characteristics: Dict[str, Any]) -> str",
                "is_public": false
              },
              {
                "name": "_initialize_rules",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_score_area_types",
                "signature": "(self, characteristics: Dict[str, Any]) -> Dict[core.models.unified_area_model.AreaType, float]",
                "is_public": false
              },
              {
                "name": "_score_chart_type",
                "signature": "(self, characteristics: Dict[str, Any]) -> float",
                "is_public": false
              },
              {
                "name": "_score_diagram_type",
                "signature": "(self, characteristics: Dict[str, Any]) -> float",
                "is_public": false
              },
              {
                "name": "_score_figure_type",
                "signature": "(self, characteristics: Dict[str, Any]) -> float",
                "is_public": false
              },
              {
                "name": "_score_footer_type",
                "signature": "(self, characteristics: Dict[str, Any]) -> float",
                "is_public": false
              },
              {
                "name": "_score_header_type",
                "signature": "(self, characteristics: Dict[str, Any]) -> float",
                "is_public": false
              },
              {
                "name": "_score_image_type",
                "signature": "(self, characteristics: Dict[str, Any]) -> float",
                "is_public": false
              },
              {
                "name": "_score_table_type",
                "signature": "(self, characteristics: Dict[str, Any]) -> float",
                "is_public": false
              },
              {
                "name": "_score_text_type",
                "signature": "(self, characteristics: Dict[str, Any]) -> float",
                "is_public": false
              },
              {
                "name": "classify_area",
                "signature": "(self, coordinates: core.models.unified_area_model.AreaCoordinates, content_text: str = '', metadata: Optional[Dict[str, Any]] = None) -> core.services.area_classification_service.ClassificationResult",
                "is_public": true
              },
              {
                "name": "classify_multiple_areas",
                "signature": "(self, areas_data: List[Dict[str, Any]]) -> List[core.services.area_classification_service.ClassificationResult]",
                "is_public": true
              },
              {
                "name": "get_classification_statistics",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "ClassificationConfidence",
            "doc": "Confidence levels for area classification.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ClassificationResult",
            "doc": "Result of area classification.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, area_type: core.models.unified_area_model.AreaType, confidence: core.services.area_classification_service.ClassificationConfidence, score: float, reasoning: str = '', alternative_types: List[Tuple[core.models.unified_area_model.AreaType, float]] = None) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 3,
        "public_functions": 0,
        "public_classes": 3
      },
      {
        "module": "core.services.text_extraction_service",
        "functions": [],
        "classes": [
          {
            "name": "ExtractionResult",
            "doc": "Result of text extraction operation.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, text: str = '', pages: List[Dict[str, Any]] = <factory>, character_coordinates: Dict[int, core.services.coordinate_mapping_service.Coordinates] = <factory>, page_text_mapping: Dict[int, str] = <factory>, tables: List[Dict[str, Any]] = <factory>, images: List[Dict[str, Any]] = <factory>, diagrams: List[Dict[str, Any]] = <factory>, extraction_confidence: float = 0.0, character_count: int = 0, word_count: int = 0, extraction_method: str = '', extraction_time: float = 0.0, created_at: datetime.datetime = <factory>, errors: List[str] = <factory>, warnings: List[str] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "TextExtractionService",
            "doc": "Unified text extraction service.\n\nThis service provides a clean interface for text extraction from documents,\nwith character-level coordinate mapping and comprehensive error handling.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, coordinate_service: core.services.coordinate_mapping_service.CoordinateMappingService)",
                "is_public": false
              },
              {
                "name": "_analyze_content",
                "signature": "(self, doc: fitz.fitz.Document, result: core.services.text_extraction_service.ExtractionResult, start_page: int, end_page: int)",
                "is_public": false
              },
              {
                "name": "_detect_diagrams",
                "signature": "(self, page: fitz.fitz.Page, page_number: int) -> List[Dict[str, Any]]",
                "is_public": false
              },
              {
                "name": "_detect_images",
                "signature": "(self, page: fitz.fitz.Page, page_number: int) -> List[Dict[str, Any]]",
                "is_public": false
              },
              {
                "name": "_detect_tables",
                "signature": "(self, page: fitz.fitz.Page, page_number: int) -> List[Dict[str, Any]]",
                "is_public": false
              },
              {
                "name": "_extract_single_page",
                "signature": "(self, page: fitz.fitz.Page, page_number: int, include_coordinates: bool) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_generate_cache_key",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, page_range: Optional[Tuple[int, int]], include_coordinates: bool) -> str",
                "is_public": false
              },
              {
                "name": "_perform_extraction",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, page_range: Optional[Tuple[int, int]], include_coordinates: bool, include_content_analysis: bool) -> core.services.text_extraction_service.ExtractionResult",
                "is_public": false
              },
              {
                "name": "_update_stats",
                "signature": "(self, result: core.services.text_extraction_service.ExtractionResult, extraction_time: float)",
                "is_public": false
              },
              {
                "name": "clear_cache",
                "signature": "(self, document_id: Optional[str] = None)",
                "is_public": true
              },
              {
                "name": "extract_page_text",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, page_number: int, include_coordinates: bool = True) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "extract_text",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, page_range: Optional[Tuple[int, int]] = None, include_coordinates: bool = True, include_content_analysis: bool = True) -> core.services.text_extraction_service.ExtractionResult",
                "is_public": true
              },
              {
                "name": "get_performance_stats",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_text_at_coordinates",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, coordinates: core.services.coordinate_mapping_service.Coordinates) -> Optional[str]",
                "is_public": true
              },
              {
                "name": "search_text_in_document",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, search_text: str, case_sensitive: bool = False) -> List[Dict[str, Any]]",
                "is_public": true
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 2,
        "public_functions": 0,
        "public_classes": 2
      },
      {
        "module": "core.services.validation_service",
        "functions": [],
        "classes": [
          {
            "name": "IssueSeverity",
            "doc": "Severity levels for validation issues.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "IssueType",
            "doc": "Types of validation issues.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ValidationIssue",
            "doc": "Represents a validation issue.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, issue_id: str, issue_type: core.services.validation_service.IssueType, severity: core.services.validation_service.IssueSeverity, page: int, coordinates: Optional[core.services.coordinate_mapping_service.Coordinates] = None, text_position: Optional[core.services.coordinate_mapping_service.TextPosition] = None, title: str = '', description: str = '', suggested_fix: str = '', original_text: str = '', corrected_text: str = '', context_text: str = '', status: core.services.validation_service.ValidationStatus = <ValidationStatus.NOT_STARTED: 'not_started'>, resolution_notes: str = '', detected_by: str = '', created_at: datetime.datetime = <factory>, resolved_at: Optional[datetime.datetime] = None, resolved_by: Optional[str] = None, metadata: Dict[str, Any] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ValidationService",
            "doc": "Comprehensive validation service for document processing.\n\nThis service manages the complete validation workflow, from issue detection\nto resolution tracking, with support for multiple validation modes.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, coordinate_service: core.services.coordinate_mapping_service.CoordinateMappingService, extraction_service: core.services.text_extraction_service.TextExtractionService)",
                "is_public": false
              },
              {
                "name": "_detect_formatting_issues",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, extraction_result: core.services.text_extraction_service.ExtractionResult, session: core.services.validation_service.ValidationSession)",
                "is_public": false
              },
              {
                "name": "_detect_issues",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, session: core.services.validation_service.ValidationSession)",
                "is_public": false
              },
              {
                "name": "_detect_ocr_issues",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, extraction_result: core.services.text_extraction_service.ExtractionResult, session: core.services.validation_service.ValidationSession)",
                "is_public": false
              },
              {
                "name": "_detect_structure_issues",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, extraction_result: core.services.text_extraction_service.ExtractionResult, session: core.services.validation_service.ValidationSession)",
                "is_public": false
              },
              {
                "name": "_detect_table_issues",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, extraction_result: core.services.text_extraction_service.ExtractionResult, session: core.services.validation_service.ValidationSession)",
                "is_public": false
              },
              {
                "name": "_initialize_detection_rules",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_resolve_issue",
                "signature": "(self, session_id: str, issue_id: str, status: core.services.validation_service.ValidationStatus, notes: str) -> bool",
                "is_public": false
              },
              {
                "name": "approve_issue",
                "signature": "(self, session_id: str, issue_id: str, notes: str = '') -> bool",
                "is_public": true
              },
              {
                "name": "complete_page_validation",
                "signature": "(self, session_id: str, page: int) -> bool",
                "is_public": true
              },
              {
                "name": "complete_validation_session",
                "signature": "(self, session_id: str) -> bool",
                "is_public": true
              },
              {
                "name": "correct_issue",
                "signature": "(self, session_id: str, issue_id: str, corrected_text: str, notes: str = '') -> bool",
                "is_public": true
              },
              {
                "name": "create_validation_session",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, validator_id: str, validation_mode: str = 'page_by_page') -> str",
                "is_public": true
              },
              {
                "name": "get_current_issue",
                "signature": "(self, session_id: str) -> Optional[core.services.validation_service.ValidationIssue]",
                "is_public": true
              },
              {
                "name": "get_page_issues",
                "signature": "(self, session_id: str, page: int) -> List[core.services.validation_service.ValidationIssue]",
                "is_public": true
              },
              {
                "name": "get_performance_stats",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_session_statistics",
                "signature": "(self, session_id: str) -> Optional[Dict[str, Any]]",
                "is_public": true
              },
              {
                "name": "get_validation_session",
                "signature": "(self, session_id: str) -> Optional[core.services.validation_service.ValidationSession]",
                "is_public": true
              },
              {
                "name": "navigate_to_issue",
                "signature": "(self, session_id: str, issue_index: int) -> bool",
                "is_public": true
              },
              {
                "name": "navigate_to_page",
                "signature": "(self, session_id: str, page: int) -> bool",
                "is_public": true
              },
              {
                "name": "reject_issue",
                "signature": "(self, session_id: str, issue_id: str, notes: str = '') -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "ValidationSession",
            "doc": "Represents a validation session.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, session_id: str, document_id: str, validator_id: str, status: core.services.validation_service.ValidationStatus = <ValidationStatus.NOT_STARTED: 'not_started'>, current_page: int = 1, current_issue_index: int = 0, issues: List[core.services.validation_service.ValidationIssue] = <factory>, resolved_issues: List[core.services.validation_service.ValidationIssue] = <factory>, pages_validated: List[int] = <factory>, total_pages: int = 0, started_at: datetime.datetime = <factory>, completed_at: Optional[datetime.datetime] = None, validation_mode: str = 'page_by_page', auto_approve_threshold: float = 0.9, require_manual_review: bool = True, stats: Dict[str, Any] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ValidationStatus",
            "doc": "Status of validation.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 6,
        "public_functions": 0,
        "public_classes": 6
      },
      {
        "module": "core.services.coordinate_mapping_service",
        "functions": [],
        "classes": [
          {
            "name": "CoordinateMappingService",
            "doc": "Centralized service for all coordinate transformations.\n\nThis service handles coordinate mapping between different systems:\n- PDF coordinates (PyMuPDF native)\n- Widget coordinates (Qt widget system)\n- Pixmap coordinates (QPixmap drawing system)\n- Text positions (character-level positioning)",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_approximate_text_position",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, text_position: core.services.coordinate_mapping_service.TextPosition) -> Optional[core.services.coordinate_mapping_service.Coordinates]",
                "is_public": false
              },
              {
                "name": "_calculate_bbox_distance",
                "signature": "(self, bbox1: List[float], bbox2: List[float]) -> float",
                "is_public": false
              },
              {
                "name": "_generate_text_mapping",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, page: int)",
                "is_public": false
              },
              {
                "name": "clear_cache",
                "signature": "(self, document_id: Optional[str] = None)",
                "is_public": true
              },
              {
                "name": "get_cache_stats",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_page_dimensions",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, page: int) -> Tuple[float, float]",
                "is_public": true
              },
              {
                "name": "pdf_to_text_position",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, coordinates: core.services.coordinate_mapping_service.Coordinates) -> Optional[core.services.coordinate_mapping_service.TextPosition]",
                "is_public": true
              },
              {
                "name": "pdf_to_widget",
                "signature": "(self, coordinates: core.services.coordinate_mapping_service.Coordinates, widget_height: float) -> core.services.coordinate_mapping_service.Coordinates",
                "is_public": true
              },
              {
                "name": "text_position_to_pdf",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, text_position: core.services.coordinate_mapping_service.TextPosition) -> Optional[core.services.coordinate_mapping_service.Coordinates]",
                "is_public": true
              },
              {
                "name": "validate_coordinates",
                "signature": "(self, coordinates: core.services.coordinate_mapping_service.Coordinates, document: core.models.unified_document_model.UnifiedDocument) -> bool",
                "is_public": true
              },
              {
                "name": "widget_to_pdf",
                "signature": "(self, coordinates: core.services.coordinate_mapping_service.Coordinates, widget_height: float) -> core.services.coordinate_mapping_service.Coordinates",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "CoordinateSystem",
            "doc": "Supported coordinate systems.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "Coordinates",
            "doc": "Represents coordinates in a specific system.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, x: float, y: float, width: float = 0.0, height: float = 0.0, system: core.services.coordinate_mapping_service.CoordinateSystem = <CoordinateSystem.PDF: 'pdf'>, page: int = 1, zoom_factor: float = 1.0) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "from_bbox",
                "signature": "(bbox: List[float], system: core.services.coordinate_mapping_service.CoordinateSystem = <CoordinateSystem.PDF: 'pdf'>, page: int = 1, zoom_factor: float = 1.0) -> 'Coordinates'",
                "is_public": true
              },
              {
                "name": "to_bbox",
                "signature": "(self) -> List[float]",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "TextPosition",
            "doc": "Represents a position within text content.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, character_index: int, line_number: int = 0, column_number: int = 0, page: int = 1) -> None",
                "is_public": false
              },
              {
                "name": "__post_init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 4,
        "public_functions": 0,
        "public_classes": 4
      },
      {
        "module": "core.processors.pipeline_orchestrator",
        "functions": [],
        "classes": [
          {
            "name": "PipelineConfig",
            "doc": "Configuration for pipeline execution.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, enable_parallel_processing: bool = True, max_concurrent_documents: int = 4, require_manual_validation: bool = True, min_quality_threshold: float = 0.8, retry_on_failure: bool = True, max_retries: int = 3, continue_on_error: bool = False, enable_caching: bool = True, cache_timeout: int = 3600, enable_metrics: bool = True, log_performance: bool = True, auto_export: bool = False, export_formats: List[str] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "PipelineMetrics",
            "doc": "Metrics for pipeline execution.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, total_documents: int = 0, successful_documents: int = 0, failed_documents: int = 0, start_time: Optional[datetime.datetime] = None, end_time: Optional[datetime.datetime] = None, total_processing_time: float = 0.0, average_time_per_document: float = 0.0, average_quality_score: float = 0.0, documents_requiring_validation: int = 0, stage_timings: Dict[str, float] = <factory>, stage_success_rates: Dict[str, float] = <factory>, error_counts: Dict[str, int] = <factory>, retry_counts: Dict[str, int] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "PipelineOrchestrator",
            "doc": "Orchestrates the complete document processing pipeline.\n\nThis orchestrator manages the workflow between different services,\nhandles errors and retries, monitors performance, and provides\ncomprehensive state management.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, document_processor: core.processors.unified_document_processor.UnifiedDocumentProcessor, coordinate_service: core.services.coordinate_mapping_service.CoordinateMappingService, extraction_service: core.services.text_extraction_service.TextExtractionService, validation_service: core.services.validation_service.ValidationService, quality_engine: core.processors.quality_assessment_engine.QualityAssessmentEngine)",
                "is_public": false
              },
              {
                "name": "_assess_quality",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_calculate_final_metrics",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_default_stage_handler",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState, stage: core.processors.pipeline_orchestrator.PipelineStage)",
                "is_public": false
              },
              {
                "name": "_execute_pipeline_stages",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_execute_stage",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState, stage: core.processors.pipeline_orchestrator.PipelineStage)",
                "is_public": false
              },
              {
                "name": "_export_results",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_extract_text",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_extract_text_parallel",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_extract_text_sequential",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_finalize_processing",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_handle_stage_error",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState, stage: core.processors.pipeline_orchestrator.PipelineStage, error: Exception) -> bool",
                "is_public": false
              },
              {
                "name": "_initialize_pipeline",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_load_documents",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_notify_progress_callbacks",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_perform_validation",
                "signature": "(self, pipeline_state: core.processors.pipeline_orchestrator.PipelineState)",
                "is_public": false
              },
              {
                "name": "_process_single_document",
                "signature": "(self, doc_id: str, pipeline_state: core.processors.pipeline_orchestrator.PipelineState) -> core.models.unified_document_model.ProcessingResult",
                "is_public": false
              },
              {
                "name": "_register_default_handlers",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "cancel_pipeline",
                "signature": "(self, pipeline_id: str) -> bool",
                "is_public": true
              },
              {
                "name": "create_pipeline",
                "signature": "(self, documents: List[Union[str, pathlib.Path, core.models.unified_document_model.UnifiedDocument]], config: Optional[core.processors.pipeline_orchestrator.PipelineConfig] = None, pipeline_id: Optional[str] = None) -> str",
                "is_public": true
              },
              {
                "name": "execute_pipeline",
                "signature": "(self, pipeline_id: str) -> core.processors.pipeline_orchestrator.PipelineState",
                "is_public": true
              },
              {
                "name": "get_performance_stats",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_pipeline_status",
                "signature": "(self, pipeline_id: str) -> Optional[Dict[str, Any]]",
                "is_public": true
              },
              {
                "name": "register_error_handler",
                "signature": "(self, error_type: str, handler: Callable)",
                "is_public": true
              },
              {
                "name": "register_progress_callback",
                "signature": "(self, callback: Callable)",
                "is_public": true
              },
              {
                "name": "register_stage_handler",
                "signature": "(self, stage: core.processors.pipeline_orchestrator.PipelineStage, handler: Callable)",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "PipelineStage",
            "doc": "Pipeline processing stages.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "PipelineState",
            "doc": "State of pipeline execution.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, pipeline_id: str, status: core.processors.pipeline_orchestrator.PipelineStatus = <PipelineStatus.PENDING: 'pending'>, current_stage: core.processors.pipeline_orchestrator.PipelineStage = <PipelineStage.INITIALIZATION: 'initialization'>, document_queue: List[str] = <factory>, processing_documents: Dict[str, core.processors.pipeline_orchestrator.PipelineStage] = <factory>, completed_documents: Dict[str, core.models.unified_document_model.ProcessingResult] = <factory>, failed_documents: Dict[str, str] = <factory>, progress_percentage: float = 0.0, current_document_index: int = 0, metrics: core.processors.pipeline_orchestrator.PipelineMetrics = <factory>, config: core.processors.pipeline_orchestrator.PipelineConfig = <factory>, created_at: datetime.datetime = <factory>, started_at: Optional[datetime.datetime] = None, completed_at: Optional[datetime.datetime] = None) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "PipelineStatus",
            "doc": "Pipeline execution status.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 6,
        "public_functions": 0,
        "public_classes": 6
      },
      {
        "module": "core.processors.quality_assessment_engine",
        "functions": [],
        "classes": [
          {
            "name": "QualityAssessmentEngine",
            "doc": "Comprehensive quality assessment engine for document processing.\n\nThis engine evaluates the quality of extracted content across multiple\ndimensions and provides detailed reports for validation decisions.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, thresholds: Optional[core.processors.quality_assessment_engine.QualityThresholds] = None)",
                "is_public": false
              },
              {
                "name": "_assess_content_quality",
                "signature": "(self, metrics: core.processors.quality_assessment_engine.QualityMetrics, extraction_result: Dict[str, Any])",
                "is_public": false
              },
              {
                "name": "_assess_extraction_quality",
                "signature": "(self, metrics: core.processors.quality_assessment_engine.QualityMetrics, extraction_result: Dict[str, Any])",
                "is_public": false
              },
              {
                "name": "_assess_processing_quality",
                "signature": "(self, metrics: core.processors.quality_assessment_engine.QualityMetrics, extraction_result: Dict[str, Any], document: core.models.unified_document_model.UnifiedDocument)",
                "is_public": false
              },
              {
                "name": "_assess_structure_quality",
                "signature": "(self, metrics: core.processors.quality_assessment_engine.QualityMetrics, extraction_result: Dict[str, Any])",
                "is_public": false
              },
              {
                "name": "_calculate_overall_score",
                "signature": "(self, metrics: core.processors.quality_assessment_engine.QualityMetrics) -> float",
                "is_public": false
              },
              {
                "name": "_identify_issues",
                "signature": "(self, metrics: core.processors.quality_assessment_engine.QualityMetrics)",
                "is_public": false
              },
              {
                "name": "assess_quality",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, extraction_result: Dict[str, Any]) -> core.processors.quality_assessment_engine.QualityMetrics",
                "is_public": true
              },
              {
                "name": "get_assessment_summary",
                "signature": "(self, metrics: core.processors.quality_assessment_engine.QualityMetrics) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_performance_stats",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "update_thresholds",
                "signature": "(self, new_thresholds: core.processors.quality_assessment_engine.QualityThresholds)",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "QualityMetrics",
            "doc": "Quality metrics for a document.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, overall_score: float = 0.0, extraction_quality: float = 0.0, structure_quality: float = 0.0, content_quality: float = 0.0, processing_quality: float = 0.0, ocr_confidence: float = 0.0, text_completeness: float = 0.0, character_recognition_rate: float = 0.0, word_recognition_rate: float = 0.0, layout_detection_score: float = 0.0, table_detection_score: float = 0.0, image_detection_score: float = 0.0, paragraph_structure_score: float = 0.0, language_consistency: float = 0.0, text_coherence: float = 0.0, formatting_preservation: float = 0.0, special_characters_ratio: float = 0.0, extraction_speed: float = 0.0, memory_efficiency: float = 0.0, error_rate: float = 0.0, issues: List[Dict[str, Any]] = <factory>, warnings: List[Dict[str, Any]] = <factory>, assessed_at: datetime.datetime = <factory>, assessment_time: float = 0.0) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "QualityThresholds",
            "doc": "Configurable quality thresholds.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, min_overall_score: float = 0.8, min_extraction_quality: float = 0.7, min_structure_quality: float = 0.6, min_content_quality: float = 0.7, min_processing_quality: float = 0.5, min_ocr_confidence: float = 0.8, min_character_recognition: float = 0.9, min_word_recognition: float = 0.85, max_special_characters_ratio: float = 0.1, min_text_coherence: float = 0.7, min_language_consistency: float = 0.8, max_extraction_time_per_page: float = 5.0, max_memory_per_page: float = 100.0, max_error_rate: float = 0.05) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 3,
        "public_functions": 0,
        "public_classes": 3
      },
      {
        "module": "core.processors.extraction_strategies",
        "functions": [
          {
            "name": "get_available_strategies",
            "signature": "(settings=None) -> Dict[str, core.processors.extraction_strategies.ExtractionStrategy]",
            "doc": "Get all available extraction strategies.",
            "is_public": true
          },
          {
            "name": "get_best_strategy_for_document",
            "signature": "(document: core.models.unified_document_model.UnifiedDocument, available_strategies: Dict[str, core.processors.extraction_strategies.ExtractionStrategy]) -> Optional[core.processors.extraction_strategies.ExtractionStrategy]",
            "doc": "Select the best extraction strategy for a document based on its characteristics.\n\nArgs:\n    document: Document to analyze\n    available_strategies: Available extraction strategies\n    \nReturns:\n    Best strategy for the document, or None if none available",
            "is_public": true
          }
        ],
        "classes": [
          {
            "name": "ExtractionStrategy",
            "doc": "Abstract base class for text extraction strategies.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, name: str)",
                "is_public": false
              },
              {
                "name": "_update_stats",
                "signature": "(self, processing_time: float, success: bool, quality_score: float = 0.0)",
                "is_public": false
              },
              {
                "name": "extract",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_performance_stats",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "is_available",
                "signature": "(self) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "OCRExtractionStrategy",
            "doc": "OCR-based extraction strategy for images and poor-quality PDFs.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, settings=None)",
                "is_public": false
              },
              {
                "name": "_update_stats",
                "signature": "(self, processing_time: float, success: bool, quality_score: float = 0.0)",
                "is_public": false
              },
              {
                "name": "extract",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_performance_stats",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "is_available",
                "signature": "(self) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "PyMuPDFExtractionStrategy",
            "doc": "Standard PyMuPDF extraction strategy - reliable fallback method.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, settings=None)",
                "is_public": false
              },
              {
                "name": "_extract_page_basic",
                "signature": "(self, page: fitz.fitz.Page, page_num: int) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_extract_page_enhanced",
                "signature": "(self, page: fitz.fitz.Page, page_num: int) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_update_stats",
                "signature": "(self, processing_time: float, success: bool, quality_score: float = 0.0)",
                "is_public": false
              },
              {
                "name": "extract",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_performance_stats",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "is_available",
                "signature": "(self) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "UnstructuredExtractionStrategy",
            "doc": "Unstructured.io extraction strategy for advanced document structure detection.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, settings=None)",
                "is_public": false
              },
              {
                "name": "_update_stats",
                "signature": "(self, processing_time: float, success: bool, quality_score: float = 0.0)",
                "is_public": false
              },
              {
                "name": "extract",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "get_performance_stats",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "is_available",
                "signature": "(self) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 2,
        "total_classes": 4,
        "public_functions": 2,
        "public_classes": 4
      },
      {
        "module": "core.processors.unified_document_processor",
        "functions": [],
        "classes": [
          {
            "name": "DocumentProcessingError",
            "doc": "Exception raised when document processing fails.",
            "methods": [],
            "is_public": true
          },
          {
            "name": "ProcessingConfig",
            "doc": "Configuration for document processing.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, min_quality_score: float = 0.8, require_manual_validation: bool = True, extract_images: bool = True, extract_tables: bool = True, extract_diagrams: bool = True, max_workers: int = 4, chunk_size: int = 512, chunk_overlap: int = 50, extraction_strategies: List[str] = <factory>, export_formats: List[str] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "UnifiedDocumentProcessor",
            "doc": "Unified document processor that handles all document types and processing modes.\n\nThis processor replaces the original document_processor.py and \nenhanced_document_processor.py, providing a single, clean interface\nfor all document processing operations.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, coordinate_service: core.services.coordinate_mapping_service.CoordinateMappingService, extraction_service: core.services.text_extraction_service.TextExtractionService, validation_service: core.services.validation_service.ValidationService, quality_engine: core.processors.quality_assessment_engine.QualityAssessmentEngine, config: Optional[core.processors.unified_document_processor.ProcessingConfig] = None)",
                "is_public": false
              },
              {
                "name": "_assess_quality",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, extraction_result: Dict[str, Any]) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_extract_content",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_generate_document_id",
                "signature": "(self, path: pathlib.Path) -> str",
                "is_public": false
              },
              {
                "name": "_generate_result",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, extraction_result: Dict[str, Any], quality_result: Dict[str, Any], validation_result: Optional[Dict[str, Any]]) -> core.models.unified_document_model.ProcessingResult",
                "is_public": false
              },
              {
                "name": "_is_supported_format",
                "signature": "(self, file_type: str) -> bool",
                "is_public": false
              },
              {
                "name": "_load_document",
                "signature": "(self, document_path: Union[str, pathlib.Path], project_id: Optional[str]) -> core.models.unified_document_model.UnifiedDocument",
                "is_public": false
              },
              {
                "name": "_perform_validation",
                "signature": "(self, document: core.models.unified_document_model.UnifiedDocument, extraction_result: Dict[str, Any]) -> Dict[str, Any]",
                "is_public": false
              },
              {
                "name": "_requires_validation",
                "signature": "(self, quality_result: Dict[str, Any], processing_mode: str) -> bool",
                "is_public": false
              },
              {
                "name": "clear_results",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "get_all_results",
                "signature": "(self) -> Dict[str, core.models.unified_document_model.ProcessingResult]",
                "is_public": true
              },
              {
                "name": "get_processing_status",
                "signature": "(self, document_id: str) -> Optional[Dict[str, Any]]",
                "is_public": true
              },
              {
                "name": "process_batch",
                "signature": "(self, document_paths: List[Union[str, pathlib.Path]], project_id: Optional[str] = None) -> Dict[str, core.models.unified_document_model.ProcessingResult]",
                "is_public": true
              },
              {
                "name": "process_document",
                "signature": "(self, document_path: Union[str, pathlib.Path], project_id: Optional[str] = None, processing_mode: str = 'automatic') -> core.models.unified_document_model.ProcessingResult",
                "is_public": true
              },
              {
                "name": "register_extraction_strategy",
                "signature": "(self, name: str, strategy: core.processors.extraction_strategies.ExtractionStrategy)",
                "is_public": true
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 3,
        "public_functions": 0,
        "public_classes": 3
      },
      {
        "module": "core.models.validation_state_model",
        "functions": [],
        "classes": [
          {
            "name": "ValidationRule",
            "doc": "A validation rule.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, id: str, name: str, description: str, rule_type: str, parameters: Dict[str, Any] = <factory>, enabled: bool = True) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ValidationState",
            "doc": "Validation state for documents and areas.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, status: core.models.validation_state_model.ValidationStatus = <ValidationStatus.NOT_STARTED: 'not_started'>, rules_applied: List[str] = <factory>, issues_found: List[Dict[str, Any]] = <factory>, quality_score: float = 0.0, validated_at: Optional[datetime.datetime] = None, validated_by: Optional[str] = None, notes: str = '') -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ValidationStatus",
            "doc": "Validation status options.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 3,
        "public_functions": 0,
        "public_classes": 3
      },
      {
        "module": "core.models.unified_document_model",
        "functions": [],
        "classes": [
          {
            "name": "DocumentMetadata",
            "doc": "Document metadata information.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, file_size: int = 0, file_type: str = '', mime_type: str = '', page_count: int = 0, language: str = 'en', encoding: str = 'utf-8', extraction_method: str = '', quality_score: float = 0.0, processing_time: float = 0.0, document_type: str = 'unknown', classification_confidence: float = 0.0, total_characters: int = 0, total_words: int = 0, total_paragraphs: int = 0, total_tables: int = 0, total_images: int = 0, total_diagrams: int = 0, custom_fields: Dict[str, Any] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "DocumentStatus",
            "doc": "Document processing status.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ProcessingConfig",
            "doc": "Configuration for document processing.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, min_quality_score: float = 0.8, require_manual_validation: bool = True, extract_text: bool = True, extract_images: bool = True, extract_tables: bool = True, extract_diagrams: bool = True, export_formats: List[str] = <factory>, chunk_size: int = 512, chunk_overlap: int = 50, use_ocr: bool = False, ocr_language: str = 'eng', preserve_formatting: bool = True) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ProcessingResult",
            "doc": "Result of document processing operation.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, document_id: str, operation: str = 'process', success: bool = False, extraction_data: Dict[str, Any] = <factory>, quality_assessment: Dict[str, Any] = <factory>, validation_data: Optional[Dict[str, Any]] = None, processing_time: float = 0.0, memory_usage: float = 0.0, created_at: datetime.datetime = <factory>, error_message: Optional[str] = None, error_details: Dict[str, Any] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "from_dict",
                "signature": "(data: Dict[str, Any]) -> 'ProcessingResult'",
                "is_public": true
              },
              {
                "name": "get_summary",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "to_dict",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "ProcessingStage",
            "doc": "Current processing stage.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "UnifiedDocument",
            "doc": "Unified document model that handles all document types and processing states.\n\nThis model replaces the scattered document models from the original codebase\nand provides a single, comprehensive representation of a document throughout\nits processing lifecycle.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, id: str, project_id: Optional[str] = None, file_path: str = '', file_name: str = '', original_filename: str = '', status: core.models.unified_document_model.DocumentStatus = <DocumentStatus.CREATED: 'created'>, processing_stage: core.models.unified_document_model.ProcessingStage = <ProcessingStage.INITIAL: 'initial'>, created_at: datetime.datetime = <factory>, modified_at: datetime.datetime = <factory>, processed_at: Optional[datetime.datetime] = None, extracted_text: str = '', extracted_content: Dict[str, Any] = <factory>, areas: Dict[str, Any] = <factory>, visual_areas: Dict[str, Any] = <factory>, exclusion_zones: List[Dict[str, Any]] = <factory>, extraction_results: Dict[str, Any] = <factory>, quality_assessment: Dict[str, Any] = <factory>, validation_results: Dict[str, Any] = <factory>, processing_config: core.models.unified_document_model.ProcessingConfig = <factory>, metadata: core.models.unified_document_model.DocumentMetadata = <factory>, errors: List[Dict[str, Any]] = <factory>, warnings: List[Dict[str, Any]] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__post_init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "add_error",
                "signature": "(self, error_type: str, message: str, details: Optional[Dict[str, Any]] = None)",
                "is_public": true
              },
              {
                "name": "add_warning",
                "signature": "(self, warning_type: str, message: str, details: Optional[Dict[str, Any]] = None)",
                "is_public": true
              },
              {
                "name": "from_dict",
                "signature": "(data: Dict[str, Any]) -> 'UnifiedDocument'",
                "is_public": true
              },
              {
                "name": "get_area_count",
                "signature": "(self) -> int",
                "is_public": true
              },
              {
                "name": "get_page_count",
                "signature": "(self) -> int",
                "is_public": true
              },
              {
                "name": "get_quality_score",
                "signature": "(self) -> float",
                "is_public": true
              },
              {
                "name": "get_summary",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "is_processed",
                "signature": "(self) -> bool",
                "is_public": true
              },
              {
                "name": "requires_validation",
                "signature": "(self) -> bool",
                "is_public": true
              },
              {
                "name": "to_dict",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "update_status",
                "signature": "(self, status: core.models.unified_document_model.DocumentStatus, stage: Optional[core.models.unified_document_model.ProcessingStage] = None)",
                "is_public": true
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 6,
        "public_functions": 0,
        "public_classes": 6
      },
      {
        "module": "core.models.unified_area_model",
        "functions": [
          {
            "name": "create_image_area",
            "signature": "(document_id: str, area_id: str, coordinates: core.models.unified_area_model.AreaCoordinates, image_data: Dict[str, Any]) -> core.models.unified_area_model.UnifiedArea",
            "doc": "Create an image area.",
            "is_public": true
          },
          {
            "name": "create_table_area",
            "signature": "(document_id: str, area_id: str, coordinates: core.models.unified_area_model.AreaCoordinates, table_data: Dict[str, Any]) -> core.models.unified_area_model.UnifiedArea",
            "doc": "Create a table area.",
            "is_public": true
          },
          {
            "name": "create_text_area",
            "signature": "(document_id: str, area_id: str, coordinates: core.models.unified_area_model.AreaCoordinates, text: str) -> core.models.unified_area_model.UnifiedArea",
            "doc": "Create a text area with content.",
            "is_public": true
          },
          {
            "name": "merge_areas",
            "signature": "(areas: List[core.models.unified_area_model.UnifiedArea], merged_id: str) -> core.models.unified_area_model.UnifiedArea",
            "doc": "Merge multiple areas into one.",
            "is_public": true
          }
        ],
        "classes": [
          {
            "name": "AreaContent",
            "doc": "Content extracted from an area.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, raw_text: str = '', processed_text: str = '', tables: List[Dict[str, Any]] = <factory>, images: List[Dict[str, Any]] = <factory>, fonts: List[Dict[str, Any]] = <factory>, styles: Dict[str, Any] = <factory>, language: Optional[str] = None, encoding: Optional[str] = None, extraction_confidence: float = 1.0, ocr_confidence: float = 1.0) -> None",
                "is_public": false
              },
              {
                "name": "__post_init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "from_dict",
                "signature": "(data: Dict[str, Any]) -> 'AreaContent'",
                "is_public": true
              },
              {
                "name": "to_dict",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "AreaCoordinates",
            "doc": "Normalized coordinates for an area.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, x0: float, y0: float, x1: float, y1: float, page: int, width: Optional[float] = None, height: Optional[float] = None, rotation: float = 0.0, confidence: float = 1.0, quality: float = 1.0) -> None",
                "is_public": false
              },
              {
                "name": "__post_init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "contains_point",
                "signature": "(self, x: float, y: float) -> bool",
                "is_public": true
              },
              {
                "name": "from_dict",
                "signature": "(data: Dict[str, Any]) -> 'AreaCoordinates'",
                "is_public": true
              },
              {
                "name": "intersection_area",
                "signature": "(self, other: 'AreaCoordinates') -> float",
                "is_public": true
              },
              {
                "name": "intersects",
                "signature": "(self, other: 'AreaCoordinates') -> bool",
                "is_public": true
              },
              {
                "name": "to_dict",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "AreaStatus",
            "doc": "Status of area processing and validation.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "AreaType",
            "doc": "Types of visual areas in documents.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "AreaValidation",
            "doc": "Validation results for an area.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, is_validated: bool = False, is_approved: bool = False, requires_review: bool = False, issues: List[Dict[str, Any]] = <factory>, warnings: List[str] = <factory>, content_quality: float = 1.0, coordinate_quality: float = 1.0, overall_quality: float = 1.0, validated_by: Optional[str] = None, validated_at: Optional[datetime.datetime] = None, validation_notes: str = '', corrections: List[Dict[str, Any]] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "add_correction",
                "signature": "(self, correction_type: str, original_value: Any, corrected_value: Any, reason: str = '')",
                "is_public": true
              },
              {
                "name": "add_issue",
                "signature": "(self, issue_type: str, description: str, severity: str = 'medium')",
                "is_public": true
              },
              {
                "name": "from_dict",
                "signature": "(data: Dict[str, Any]) -> 'AreaValidation'",
                "is_public": true
              },
              {
                "name": "to_dict",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "UnifiedArea",
            "doc": "Unified area model representing visual areas in documents.\n\nThis consolidates all area handling from the original codebase\ninto a single, clean model with proper separation of concerns.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, id: str, document_id: str, area_type: core.models.unified_area_model.AreaType, subtype: Optional[str] = None, coordinates: core.models.unified_area_model.AreaCoordinates = None, content: core.models.unified_area_model.AreaContent = <factory>, status: core.models.unified_area_model.AreaStatus = <AreaStatus.CREATED: 'created'>, validation: core.models.unified_area_model.AreaValidation = <factory>, created_at: datetime.datetime = <factory>, modified_at: datetime.datetime = <factory>, extraction_method: Optional[str] = None, processing_time: float = 0.0, user_notes: str = '', user_tags: List[str] = <factory>, parent_area_id: Optional[str] = None, child_area_ids: List[str] = <factory>, metadata: Dict[str, Any] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__post_init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self) -> str",
                "is_public": false
              },
              {
                "name": "__str__",
                "signature": "(self) -> str",
                "is_public": false
              },
              {
                "name": "add_child_area",
                "signature": "(self, child_area: 'UnifiedArea')",
                "is_public": true
              },
              {
                "name": "from_dict",
                "signature": "(data: Dict[str, Any]) -> 'UnifiedArea'",
                "is_public": true
              },
              {
                "name": "from_json",
                "signature": "(json_str: str) -> 'UnifiedArea'",
                "is_public": true
              },
              {
                "name": "get_area_hierarchy",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "remove_child_area",
                "signature": "(self, child_area_id: str)",
                "is_public": true
              },
              {
                "name": "to_dict",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "to_json",
                "signature": "(self) -> str",
                "is_public": true
              },
              {
                "name": "update_status",
                "signature": "(self, new_status: core.models.unified_area_model.AreaStatus)",
                "is_public": true
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 4,
        "total_classes": 6,
        "public_functions": 4,
        "public_classes": 6
      },
      {
        "module": "core.models.project_model",
        "functions": [],
        "classes": [
          {
            "name": "ProjectModel",
            "doc": "Project model for TORE Matrix Labs.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, id: str, name: str, description: str = '', settings: core.models.project_model.ProjectSettings = <factory>, stats: core.models.project_model.ProjectStats = <factory>, document_ids: List[str] = <factory>, metadata: Dict[str, Any] = <factory>, created_at: datetime.datetime = <factory>, modified_at: datetime.datetime = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ProjectSettings",
            "doc": "Project-level settings.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, quality_threshold: float = 0.8, auto_validation: bool = True, processing_mode: str = 'automatic', output_format: str = 'json', custom_settings: Dict[str, Any] = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ProjectStats",
            "doc": "Project statistics.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, total_documents: int = 0, processed_documents: int = 0, validated_documents: int = 0, total_areas: int = 0, processing_time: float = 0.0, created_at: datetime.datetime = <factory>, last_updated: datetime.datetime = <factory>) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 3,
        "public_functions": 0,
        "public_classes": 3
      },
      {
        "module": "ui.views.main_window_v2",
        "error": "cannot import name 'Theme' from 'ui.services.theme_manager' (/home/insulto/tore_matrix_labs/tore_matrix_labs_v2/ui/services/theme_manager.py)",
        "functions": [],
        "classes": []
      },
      {
        "module": "ui.services.event_bus",
        "functions": [
          {
            "name": "create_event_bus",
            "signature": "() -> ui.services.event_bus.EventBus",
            "doc": "Create a new event bus instance.",
            "is_public": true
          },
          {
            "name": "get_event_bus",
            "signature": "() -> ui.services.event_bus.EventBus",
            "doc": "Get the global event bus instance.",
            "is_public": true
          },
          {
            "name": "publish_area_selected",
            "signature": "(sender: str, area_id: str, **kwargs)",
            "doc": "Publish area selected event.",
            "is_public": true
          },
          {
            "name": "publish_coordinates_mapped",
            "signature": "(sender: str, coordinates: Dict[str, Any], **kwargs)",
            "doc": "Publish coordinates mapped event.",
            "is_public": true
          },
          {
            "name": "publish_document_loaded",
            "signature": "(sender: str, document_id: str, **kwargs)",
            "doc": "Publish document loaded event.",
            "is_public": true
          },
          {
            "name": "publish_error",
            "signature": "(sender: str, error_message: str, **kwargs)",
            "doc": "Publish error event.",
            "is_public": true
          },
          {
            "name": "publish_page_changed",
            "signature": "(sender: str, page_number: int, **kwargs)",
            "doc": "Publish page changed event.",
            "is_public": true
          }
        ],
        "classes": [
          {
            "name": "EventBus",
            "doc": "Centralized event bus for UI component communication.\n\nThis event bus provides a clean, decoupled way for UI components to\ncommunicate without complex signal chains or direct dependencies.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_remove_subscription",
                "signature": "(self, subscription: ui.services.event_bus.EventSubscription)",
                "is_public": false
              },
              {
                "name": "clear_subscriptions",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "enable_async_mode",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "get_event_history",
                "signature": "(self, event_type: Optional[ui.services.event_bus.EventType] = None, sender: Optional[str] = None, limit: int = 100) -> List[ui.services.event_bus.UIEvent]",
                "is_public": true
              },
              {
                "name": "get_statistics",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "process_async_events",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "publish",
                "signature": "(self, event_type: ui.services.event_bus.EventType, sender: Optional[str] = None, data: Optional[Dict[str, Any]] = None, priority: ui.services.event_bus.EventPriority = <EventPriority.NORMAL: 1>) -> ui.services.event_bus.UIEvent",
                "is_public": true
              },
              {
                "name": "publish_async",
                "signature": "(self, event_type: ui.services.event_bus.EventType, sender: Optional[str] = None, data: Optional[Dict[str, Any]] = None, priority: ui.services.event_bus.EventPriority = <EventPriority.NORMAL: 1>) -> ui.services.event_bus.UIEvent",
                "is_public": true
              },
              {
                "name": "publish_event",
                "signature": "(self, event: ui.services.event_bus.UIEvent) -> ui.services.event_bus.UIEvent",
                "is_public": true
              },
              {
                "name": "subscribe",
                "signature": "(self, event_types: Union[ui.services.event_bus.EventType, List[ui.services.event_bus.EventType]], handler: Callable[[ui.services.event_bus.UIEvent], NoneType], sender_filter: Union[str, List[str], NoneType] = None, priority: ui.services.event_bus.EventPriority = <EventPriority.NORMAL: 1>, once: bool = False) -> str",
                "is_public": true
              },
              {
                "name": "subscribe_global",
                "signature": "(self, handler: Callable[[ui.services.event_bus.UIEvent], NoneType], priority: ui.services.event_bus.EventPriority = <EventPriority.NORMAL: 1>) -> str",
                "is_public": true
              },
              {
                "name": "unsubscribe",
                "signature": "(self, subscription_id: str) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "EventFilter",
            "doc": "Abstract base class for event filters.",
            "methods": [
              {
                "name": "should_process",
                "signature": "(self, event: ui.services.event_bus.UIEvent) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "EventPriority",
            "doc": "Event priority levels.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "EventSubscription",
            "doc": "Represents an event subscription.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, handler: Callable[[ui.services.event_bus.UIEvent], NoneType], event_filter: Optional[ui.services.event_bus.EventFilter] = None, priority: ui.services.event_bus.EventPriority = <EventPriority.NORMAL: 1>, once: bool = False)",
                "is_public": false
              },
              {
                "name": "handle_event",
                "signature": "(self, event: ui.services.event_bus.UIEvent)",
                "is_public": true
              },
              {
                "name": "should_handle",
                "signature": "(self, event: ui.services.event_bus.UIEvent) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "EventType",
            "doc": "Types of UI events.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "EventTypeFilter",
            "doc": "Filter events by type.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, event_types: Union[ui.services.event_bus.EventType, List[ui.services.event_bus.EventType]])",
                "is_public": false
              },
              {
                "name": "should_process",
                "signature": "(self, event: ui.services.event_bus.UIEvent) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "SenderFilter",
            "doc": "Filter events by sender.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, senders: Union[str, List[str]])",
                "is_public": false
              },
              {
                "name": "should_process",
                "signature": "(self, event: ui.services.event_bus.UIEvent) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "UIEvent",
            "doc": "Represents a UI event.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, event_type: ui.services.event_bus.EventType, sender: Optional[str] = None, data: Dict[str, Any] = <factory>, timestamp: datetime.datetime = <factory>, priority: ui.services.event_bus.EventPriority = <EventPriority.NORMAL: 1>, handled: bool = False, cancelled: bool = False, event_id: Optional[str] = None) -> None",
                "is_public": false
              },
              {
                "name": "__post_init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "cancel",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "get_data",
                "signature": "(self, key: str, default: Any = None) -> Any",
                "is_public": true
              },
              {
                "name": "mark_handled",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "set_data",
                "signature": "(self, key: str, value: Any)",
                "is_public": true
              },
              {
                "name": "to_dict",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 7,
        "total_classes": 8,
        "public_functions": 7,
        "public_classes": 8
      },
      {
        "module": "ui.services.ui_state_manager",
        "functions": [],
        "classes": [
          {
            "name": "DocumentState",
            "doc": "State for document-related UI.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, current_document_id: Optional[str] = None, current_page: int = 1, total_pages: int = 0, loaded_documents: List[str] = <factory>, selected_documents: List[str] = <factory>, zoom_level: float = 1.0, display_mode: str = 'fit_width', processing_documents: Dict[str, str] = <factory>, recent_documents: List[Dict[str, Any]] = <factory>, max_recent_documents: int = 10) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ProjectState",
            "doc": "State for project-related UI.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, current_project_id: Optional[str] = None, project_name: str = '', project_path: Optional[str] = None, auto_save_enabled: bool = True, auto_save_interval: int = 300, recent_projects: List[Dict[str, Any]] = <factory>, max_recent_projects: int = 10, total_documents: int = 0, processed_documents: int = 0, validated_documents: int = 0) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "SessionState",
            "doc": "State for current session.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, session_id: str = '', session_start: datetime.datetime = <factory>, last_activity: datetime.datetime = <factory>, unsaved_changes: bool = False, auto_save_pending: bool = False, documents_processed_this_session: int = 0, total_processing_time: float = 0.0, undo_stack: List[Dict[str, Any]] = <factory>, redo_stack: List[Dict[str, Any]] = <factory>, max_undo_levels: int = 50) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "StateCategory",
            "doc": "Categories of UI state.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ThemeState",
            "doc": "State for theme and styling.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, current_theme: str = 'professional_light', font_family: str = 'Segoe UI', font_size: int = 10, icon_size: int = 24, custom_colors: Dict[str, str] = <factory>, high_contrast: bool = False, increased_font_size: bool = False) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "UILayoutState",
            "doc": "State for UI layout and window management.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, window_geometry: Dict[str, int] = <factory>, window_maximized: bool = False, splitter_states: Dict[str, List[int]] = <factory>, active_tab: str = 'ingestion', tab_order: List[str] = <factory>, panels_visible: Dict[str, bool] = <factory>, toolbar_visible: bool = True, toolbar_style: str = 'icon_and_text') -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "UIState",
            "doc": "Complete UI state container.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, document: ui.services.ui_state_manager.DocumentState = <factory>, validation: ui.services.ui_state_manager.ValidationState = <factory>, project: ui.services.ui_state_manager.ProjectState = <factory>, ui_layout: ui.services.ui_state_manager.UILayoutState = <factory>, theme: ui.services.ui_state_manager.ThemeState = <factory>, user_preferences: ui.services.ui_state_manager.UserPreferencesState = <factory>, session: ui.services.ui_state_manager.SessionState = <factory>, last_updated: datetime.datetime = <factory>, version: str = '2.0.0') -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "UIStateManager",
            "doc": "Centralized UI state manager.\n\nThis manager provides a single source of truth for all UI state,\nwith event-driven updates and persistence capabilities.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self, event_bus: Optional[ui.services.event_bus.EventBus] = None)",
                "is_public": false
              },
              {
                "name": "_auto_save",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_deserialize_datetimes",
                "signature": "(self, data: Any) -> Any",
                "is_public": false
              },
              {
                "name": "_handle_area_selected",
                "signature": "(self, event)",
                "is_public": false
              },
              {
                "name": "_handle_document_loaded",
                "signature": "(self, event)",
                "is_public": false
              },
              {
                "name": "_handle_document_selected",
                "signature": "(self, event)",
                "is_public": false
              },
              {
                "name": "_handle_page_changed",
                "signature": "(self, event)",
                "is_public": false
              },
              {
                "name": "_handle_project_loaded",
                "signature": "(self, event)",
                "is_public": false
              },
              {
                "name": "_handle_tab_changed",
                "signature": "(self, event)",
                "is_public": false
              },
              {
                "name": "_handle_theme_changed",
                "signature": "(self, event)",
                "is_public": false
              },
              {
                "name": "_handle_validation_started",
                "signature": "(self, event)",
                "is_public": false
              },
              {
                "name": "_notify_category_listeners",
                "signature": "(self, category: ui.services.ui_state_manager.StateCategory, new_state: Any)",
                "is_public": false
              },
              {
                "name": "_save_state_to_history",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_serialize_datetimes",
                "signature": "(self, data: Any) -> Any",
                "is_public": false
              },
              {
                "name": "_setup_event_subscriptions",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_update_statistics",
                "signature": "(self, category: ui.services.ui_state_manager.StateCategory, start_time: datetime.datetime)",
                "is_public": false
              },
              {
                "name": "batch_update",
                "signature": "(self, updates: Dict[ui.services.ui_state_manager.StateCategory, Dict[str, Any]]) -> bool",
                "is_public": true
              },
              {
                "name": "get_category_state",
                "signature": "(self, category: ui.services.ui_state_manager.StateCategory) -> Any",
                "is_public": true
              },
              {
                "name": "get_state",
                "signature": "(self) -> ui.services.ui_state_manager.UIState",
                "is_public": true
              },
              {
                "name": "get_statistics",
                "signature": "(self) -> Dict[str, Any]",
                "is_public": true
              },
              {
                "name": "load_state",
                "signature": "(self, file_path: Optional[pathlib.Path] = None) -> bool",
                "is_public": true
              },
              {
                "name": "register_change_listener",
                "signature": "(self, category: ui.services.ui_state_manager.StateCategory, listener: Callable[[Any], NoneType])",
                "is_public": true
              },
              {
                "name": "save_state",
                "signature": "(self, file_path: Optional[pathlib.Path] = None) -> bool",
                "is_public": true
              },
              {
                "name": "set_state_file_path",
                "signature": "(self, file_path: pathlib.Path)",
                "is_public": true
              },
              {
                "name": "unregister_change_listener",
                "signature": "(self, category: ui.services.ui_state_manager.StateCategory, listener: Callable[[Any], NoneType])",
                "is_public": true
              },
              {
                "name": "update_state",
                "signature": "(self, category: ui.services.ui_state_manager.StateCategory, updates: Dict[str, Any], emit_event: bool = True) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "UserPreferencesState",
            "doc": "State for user preferences.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, language: str = 'en', locale: str = 'en_US', confirm_deletions: bool = True, auto_backup: bool = True, backup_interval: int = 3600, enable_hardware_acceleration: bool = True, max_concurrent_processing: int = 4, cache_size_mb: int = 500, require_manual_validation: bool = True, auto_approve_high_quality: bool = False, show_validation_hints: bool = True) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          },
          {
            "name": "ValidationState",
            "doc": "State for validation-related UI.",
            "methods": [
              {
                "name": "__eq__",
                "signature": "(self, other)",
                "is_public": false
              },
              {
                "name": "__init__",
                "signature": "(self, current_session_id: Optional[str] = None, validation_mode: str = 'page_by_page', current_page_issues: List[Dict[str, Any]] = <factory>, current_issue_index: int = 0, selected_areas: List[str] = <factory>, created_areas: Dict[str, Dict[str, Any]] = <factory>, quality_thresholds: Dict[str, float] = <factory>, completed_validations: List[Dict[str, Any]] = <factory>, show_all_issues: bool = True, highlight_active_issue: bool = True, auto_navigate_issues: bool = True) -> None",
                "is_public": false
              },
              {
                "name": "__repr__",
                "signature": "(self)",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 10,
        "public_functions": 0,
        "public_classes": 10
      },
      {
        "module": "ui.services.theme_manager",
        "functions": [],
        "classes": [
          {
            "name": "ThemeManager",
            "doc": "Manager for application themes and styling.",
            "methods": [
              {
                "name": "__init__",
                "signature": "(self)",
                "is_public": false
              },
              {
                "name": "_initialize_themes",
                "signature": "(self) -> Dict[ui.services.theme_manager.ThemeName, Dict[str, str]]",
                "is_public": false
              },
              {
                "name": "apply_custom_stylesheet",
                "signature": "(self, custom_css: str) -> bool",
                "is_public": true
              },
              {
                "name": "export_theme",
                "signature": "(self, theme_name: ui.services.theme_manager.ThemeName, file_path: str) -> bool",
                "is_public": true
              },
              {
                "name": "get_available_themes",
                "signature": "(self) -> List[str]",
                "is_public": true
              },
              {
                "name": "get_current_theme",
                "signature": "(self) -> ui.services.theme_manager.ThemeName",
                "is_public": true
              },
              {
                "name": "get_stylesheet",
                "signature": "(self, theme_name: Optional[ui.services.theme_manager.ThemeName] = None) -> str",
                "is_public": true
              },
              {
                "name": "get_theme_info",
                "signature": "(self, theme_name: ui.services.theme_manager.ThemeName) -> Dict[str, str]",
                "is_public": true
              },
              {
                "name": "reset_to_default",
                "signature": "(self)",
                "is_public": true
              },
              {
                "name": "set_theme",
                "signature": "(self, theme_name: ui.services.theme_manager.ThemeName) -> bool",
                "is_public": true
              }
            ],
            "is_public": true
          },
          {
            "name": "ThemeName",
            "doc": "Available theme names.",
            "methods": [
              {
                "name": "__contains__",
                "signature": "(value)",
                "is_public": false
              },
              {
                "name": "__getitem__",
                "signature": "(name)",
                "is_public": false
              },
              {
                "name": "__iter__",
                "signature": "()",
                "is_public": false
              },
              {
                "name": "__len__",
                "signature": "()",
                "is_public": false
              }
            ],
            "is_public": true
          }
        ],
        "total_functions": 0,
        "total_classes": 2,
        "public_functions": 0,
        "public_classes": 2
      }
    ],
    "function_coverage": 0.0
  },
  "performance_report": {
    "performance_tests": 0,
    "average_execution_time": 0,
    "total_memory_usage": 0,
    "results": []
  },
  "comparison_report": {
    "overall_statistics": {
      "total_requirements": 13,
      "total_test_cases": 23,
      "tested_requirements": 13,
      "passed_requirements": 10,
      "coverage_percentage": 100.0,
      "pass_rate": 76.92307692307693
    },
    "by_requirement_type": {
      "core_functionality": {
        "total": 3,
        "passed": 2,
        "pass_rate": 66.66666666666666
      },
      "api_endpoint": {
        "total": 3,
        "passed": 2,
        "pass_rate": 66.66666666666666
      },
      "ui_workflow": {
        "total": 2,
        "passed": 2,
        "pass_rate": 100.0
      },
      "performance": {
        "total": 1,
        "passed": 0,
        "pass_rate": 0.0
      },
      "data_integrity": {
        "total": 1,
        "passed": 1,
        "pass_rate": 100.0
      },
      "security": {
        "total": 1,
        "passed": 1,
        "pass_rate": 100.0
      },
      "migration": {
        "total": 1,
        "passed": 1,
        "pass_rate": 100.0
      },
      "integration": {
        "total": 1,
        "passed": 1,
        "pass_rate": 100.0
      }
    },
    "high_priority_compliance": {
      "total_requirements": 9,
      "passed_requirements": 7,
      "compliance_rate": 77.77777777777779,
      "failed_requirements": [
        "DOC_001",
        "API_001"
      ]
    },
    "medium_priority_compliance": {
      "total_requirements": 4,
      "passed_requirements": 3,
      "compliance_rate": 75.0,
      "failed_requirements": [
        "PERF_001"
      ]
    },
    "low_priority_compliance": {
      "total_requirements": 0,
      "passed_requirements": 0,
      "compliance_rate": 0,
      "failed_requirements": []
    }
  },
  "detailed_results": [
    {
      "test_id": "DOC_001_001",
      "requirement_id": "DOC_001",
      "status": "passed",
      "execution_time": 0.00010704994201660156,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.277398"
    },
    {
      "test_id": "DOC_001_002",
      "requirement_id": "DOC_001",
      "status": "passed",
      "execution_time": 3.4809112548828125e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.277483"
    },
    {
      "test_id": "DOC_001_003",
      "requirement_id": "DOC_001",
      "status": "error",
      "execution_time": 0.0005435943603515625,
      "memory_usage": 0,
      "error_message": "could not convert string to float: '=0'",
      "timestamp": "2025-07-10T19:59:36.277545"
    },
    {
      "test_id": "DOC_002_001",
      "requirement_id": "DOC_002",
      "status": "passed",
      "execution_time": 3.0517578125e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278156"
    },
    {
      "test_id": "DOC_003_001",
      "requirement_id": "DOC_003",
      "status": "passed",
      "execution_time": 2.6226043701171875e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278235"
    },
    {
      "test_id": "API_001_001",
      "requirement_id": "API_001",
      "status": "passed",
      "execution_time": 2.5033950805664062e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278311"
    },
    {
      "test_id": "API_001_002",
      "requirement_id": "API_001",
      "status": "error",
      "execution_time": 0.00014734268188476562,
      "memory_usage": 0,
      "error_message": "could not convert string to float: '=1'",
      "timestamp": "2025-07-10T19:59:36.278366"
    },
    {
      "test_id": "API_002_001",
      "requirement_id": "API_002",
      "status": "passed",
      "execution_time": 2.8848648071289062e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278582"
    },
    {
      "test_id": "API_002_002",
      "requirement_id": "API_002",
      "status": "passed",
      "execution_time": 2.5987625122070312e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278637"
    },
    {
      "test_id": "API_003_001",
      "requirement_id": "API_003",
      "status": "passed",
      "execution_time": 2.6702880859375e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278709"
    },
    {
      "test_id": "API_003_002",
      "requirement_id": "API_003",
      "status": "passed",
      "execution_time": 2.47955322265625e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278765"
    },
    {
      "test_id": "UI_001_001",
      "requirement_id": "UI_001",
      "status": "passed",
      "execution_time": 2.4557113647460938e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278840"
    },
    {
      "test_id": "UI_001_002",
      "requirement_id": "UI_001",
      "status": "passed",
      "execution_time": 2.384185791015625e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278892"
    },
    {
      "test_id": "UI_001_003",
      "requirement_id": "UI_001",
      "status": "passed",
      "execution_time": 1.8835067749023438e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278931"
    },
    {
      "test_id": "UI_002_001",
      "requirement_id": "UI_002",
      "status": "passed",
      "execution_time": 1.7404556274414062e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.278978"
    },
    {
      "test_id": "PERF_001_001",
      "requirement_id": "PERF_001",
      "status": "passed",
      "execution_time": 1.9073486328125e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.279022"
    },
    {
      "test_id": "PERF_001_002",
      "requirement_id": "PERF_001",
      "status": "error",
      "execution_time": 0.0002040863037109375,
      "memory_usage": 0,
      "error_message": "could not convert string to float: '100MB'",
      "timestamp": "2025-07-10T19:59:36.279058"
    },
    {
      "test_id": "DATA_001_001",
      "requirement_id": "DATA_001",
      "status": "passed",
      "execution_time": 2.6464462280273438e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.279315"
    },
    {
      "test_id": "DATA_001_002",
      "requirement_id": "DATA_001",
      "status": "passed",
      "execution_time": 1.8835067749023438e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.279352"
    },
    {
      "test_id": "DATA_001_003",
      "requirement_id": "DATA_001",
      "status": "passed",
      "execution_time": 1.71661376953125e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.279386"
    },
    {
      "test_id": "DATA_002_001",
      "requirement_id": "DATA_002",
      "status": "passed",
      "execution_time": 1.7881393432617188e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.279430"
    },
    {
      "test_id": "SEC_001_001",
      "requirement_id": "SEC_001",
      "status": "passed",
      "execution_time": 1.6689300537109375e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.279472"
    },
    {
      "test_id": "INT_001_001",
      "requirement_id": "INT_001",
      "status": "passed",
      "execution_time": 1.621246337890625e-05,
      "memory_usage": 0,
      "error_message": "",
      "timestamp": "2025-07-10T19:59:36.279513"
    }
  ]
}